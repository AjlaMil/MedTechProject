service: medtech1

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

functions:

  getProducts:
    handler: functions/getProducts.handler
    events:
      - httpApi:
          path: /getProducts
          method: get
  
  getUsers:
    handler: functions/getUsers.handler
    events:
      - httpApi:
          path: /getUsers
          method: get

  getProductById:
    handler: functions/getProductById.handler
    events:
      - httpApi:
          path: /getProducts/{id}
          method: get

  createProduct:
    handler: functions/createProduct.handler
    events:
      - httpApi:
          path: /createProduct
          method: post

  editProduct:
    handler: functions/editProduct.handler
    events:
      - httpApi:
          path: /editProduct
          method: put

  deleteProduct:
    handler: functions/deleteProduct.handler
    events:
      - httpApi:
          path: /deleteProduct/{id}
          method: delete    

  getUser:
    handler: functions/getUser.handler
    events:
      - httpApi:
          path: /getUsers/{id}
          method: get

  getUserr:
    handler: functions/getUserr.handler
    events:
      - httpApi:
          path: /getUserr
          method: get

  createUser:
    handler: functions/createUser.handler
    events:
      - httpApi:
          path: /createUser
          method: post
  
  addToCart:
    handler: functions/addToCart.handler
    events:
      - httpApi:
          path: /addToCart/{id}
          method: put


  placeOrder:
    handler: functions/placeOrder.handler
    events:
      - httpApi:
          path: /placeOrder
          method: post


plugins:
  - serverless-offline
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
